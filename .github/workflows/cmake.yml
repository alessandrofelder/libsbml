name: CMake

on: [push]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-16.04]
        xml_parser_option: ['-DWITH_LIBXML','-DWITH_XERCES','-DWITH_EXPAT']
        with_namespace: ['True', 'False']
        strict: ['True', 'False']
        with_examples: ['True', 'False']
    runs-on: ${{ matrix.platform }}
    
    steps:
    - uses: actions/checkout@v2
    
    ### configure the operating system ###
    - name: Cache Windows dependencies and SWIG
      # On Windows, the dependencies live inside the source folder, ie `.`.
      # For the CI, we put SWIG there too, for simplicity.
      if: matrix.platform == 'windows-latest'
      id: cache-win-dependencies
      uses: actions/cache@v2
      with:
        path: |
              ./dependencies
              ./swig
        key: ${{ runner.os }}-dependencies
    
    - name: Download pre-built Windows dependencies and SWIG
      # Windows dependencies have to be in a subfolder called `dependencies`, directly under the git repository root.
      # also gets SWIG, completing the set of dependencies needed for windows      
      if: matrix.platform == 'windows-latest' && steps.cache-win-dependencies.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -L https://sourceforge.net/projects/sbml/files/libsbml/win-dependencies/libSBML_dependencies_vs15_release_x64.zip/download > dependencies.zip
        unzip dependencies.zip -d dependencies
        cp -r dependencies/libSBML\ Dependencies-1.0.0-b1-win64/* dependencies
        rm -r dependencies/libSBML*
        curl -L https://prdownloads.sourceforge.net/swig/swigwin-3.0.12.zip > swig.zip
        unzip swig.zip -d swig

    - name: add SWIG to Path (Windows)
      # this is separate from the SWIG download itself, because it needs to be added to the path also when SWIG is cached
      if: matrix.platform == 'windows-latest'
      shell: bash
      run: |
           echo $GITHUB_WORKSPACE"/swig/swigwin-3.0.12/" >> $GITHUB_PATH
    
    - name: Install Ubuntu dependencies
      # ubuntu already has SWIG and libxml2 by default
      if: matrix.platform == 'ubuntu-16.04'
      shell: bash
      run: |
            sudo apt-get install check
            sudo apt-get install libxerces-c-dev
            sudo apt-get install expat

    - name: Install MacOS dependencies
      # MacOS already has libxml2 by default
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: |
            brew install check    
            brew install swig
            brew install xerces-c
            brew install expat
    
    ### build the project ###
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake for default XML_parser (LIBXML2)
      if: matrix.xml_parser_option == '-DWITH_LIBXML' # default option, no need to specify -DWITH_LIBXML=...
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
            cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWITH_CHECK=True -DWITH_JAVA=True -DWITH_CPP_NAMESPACE=${{matrix.with_namespace}} -DLIBSBML_USE_STRICT_INCLUDES=${{matrix.strict}} -DWITH_EXAMPLE=${{matrix.with_examples}}
    
    - name: Configure CMake for non-default XML_parser
      if: matrix.xml_parser_option != '-DWITH_LIBXML'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
            cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWITH_CHECK=True -DWITH_JAVA=True -DWITH_LIBXML=False ${{matrix.xml_parser_option}}=True -DWITH_CPP_NAMESPACE=${{matrix.with_namespace}} -DLIBSBML_USE_STRICT_INCLUDES=${{matrix.strict}} -DWITH_EXAMPLE=${{matrix.with_examples}}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    ### run tests ###
    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE
