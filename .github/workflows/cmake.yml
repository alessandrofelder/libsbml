name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-16.04, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Cache Windows dependencies
      if: matrix.platform == 'windows-latest'
      id: cache-win-dependencies
      uses: actions/cache@v2
      with:
        path: |
              ./dependencies
              ./swig
        key: ${{ runner.os }}-dependencies
    
    - name: Get pre-built Windows dependencies
      if: matrix.platform == 'windows-latest' && steps.cache-win-dependencies.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -L https://sourceforge.net/projects/sbml/files/libsbml/win-dependencies/libSBML_dependencies_vs15_release_x64.zip/download > dependencies.zip
        unzip dependencies.zip -d dependencies
        cp -r dependencies/libSBML\ Dependencies-1.0.0-b1-win64/* dependencies
        rm -r dependencies/libSBML*
        curl -L https://prdownloads.sourceforge.net/swig/swigwin-3.0.12.zip > swig.zip
        unzip swig.zip -d swig
        ls ./swig/swigwin-3.0.12/*

    - name: add Swig to Path (Windows)
      if: matrix.platform == 'windows-latest'
      shell: bash
      run: echo "./swig/swigwin-3.0.12" >> $GITHUB_PATH
      
    - name: Check for swig on windows
      if: matrix.platform == 'windows-latest'
      shell: bash
      run: |
        swig -version

    - name: Install Ubuntu dependencies
      if: matrix.platform == 'ubuntu-16.04' && steps.cache-ubuntu-dependencies.outputs.cache-hit != 'true'
      shell: bash
      run: |
            sudo apt-get install check

    - name: Install MacOS dependencies
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: |
            brew install check    
            brew install swig

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake for unix based OSs
      if: matrix.platform != 'windows-latest'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWITH_CHECK=True -DWITH_JAVA=True


    - name: Configure CMake for Windows
      if: matrix.platform == 'windows-latest'
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
            cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWITH_CHECK=True -DWITH_JAVA=True

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
